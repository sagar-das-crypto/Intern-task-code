# -*- coding: utf-8 -*-
"""sporty_guru_pytorch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18ibfOMNXbjfLJiNvaaqcDKXiO65ZlOUK
"""

from google.colab import drive
drive.mount('/content/gdrive')

import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision
import torchvision.transforms as transforms

train_set = torchvision.datasets.CIFAR10(
      root = '/content/gdrive/My Drive/cifar-10-python.tar',
      train = True,
      download = True,
      transform = transforms.Compose([transforms.ToTensor()])
       )

train_loader = torch.utils.data.DataLoader(train_set,batch_size=100)

test_set = torchvision.datasets.CIFAR10(
      root = '/content/gdrive/My Drive/cifar-10-python.tar',
      train = False,
      download = True,
      transform = transforms.Compose([transforms.ToTensor()])
       )

test_loader = torch.utils.data.DataLoader(test_set,batch_size=100)

classes = ('plane', 'car', 'bird', 'cat',
           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')
import numpy as np
import matplotlib.pyplot as plt
torch.set_printoptions(linewidth=120)
batch = next(iter(train_loader))
images,labels = batch
grid = torchvision.utils.make_grid(images,nrow=10)
plt.figure(figsize=(15,15))
plt.imshow(np.transpose(grid,(1,2,0)))
print('labels:',labels)

class Network(nn.Module):
  def __init__(self):
    super().__init__()
    self.conv1 = nn.Conv2d(3,6,5)
    self.conv2 = nn.Conv2d(6,16,5)

    self.fc1 = nn.Linear(16*5*5,120)
    self.fc2 = nn.Linear(120,84)
    self.out = nn.Linear(84,10)
  
  def forward(self,t):
    t = t

    t = self.conv1(t)
    t = F.relu(t)
    t = F.max_pool2d(t,kernel_size=2,stride=2)

    t = self.conv2(t)
    t = F.relu(t)
    t = F.max_pool2d(t,kernel_size=2,stride=2)

    t = t.view(-1,16*5*5)
    t = self.fc1(t)
    t = F.relu(t)

    t = self.fc2(t)
    t = F.relu(t)

    t = self.out(t)
    t = F.softmax(t,dim=1)

    return t

torch.set_grad_enabled(False)
network = Network()
batch = next(iter(train_loader))
images,labels = batch

preds= network(images)
def get_num_correct(preds,labels):
  correct = preds.argmax(dim=1).eq(labels).sum()
  return correct

get_num_correct(preds,labels)

import torch.optim as optim
torch.set_grad_enabled(True)

loss = F.cross_entropy(preds,labels)
loss.item()

optimizer = optim.Adam(network.parameters(),lr=0.01)
preds = network(images)
loss = F.cross_entropy(preds,labels)
loss.backward()
optimizer.step()
print('loss1:',loss.item())
preds=network(images)
loss = F.cross_entropy(preds,labels)
print('loss2:',loss.item())

network = Network()
train_loader = torch.utils.data.DataLoader(train_set,batch_size=100)
optimizer = optim.Adam(network.parameters(),lr=0.001)

for epoch in range(22):
  total_loss = 0
  total_correct = 0
  for batch in train_loader:
    images,labels = batch
    preds = network(images)
    loss = F.cross_entropy(preds,labels)

    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
    total_loss += loss.item()
    total_correct += get_num_correct(preds,labels)
  print("epoch:",epoch,"total_correct:",total_correct,"loss:",total_loss)

correct = 0
total = 0
with torch.no_grad():
    for batch in test_loader:
        images, labels = batch
        preds = network(images)
        _, predicted = torch.max(preds.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

print('Accuracy of the network on the 10000 test images: %d %%' % (
    100 * correct / total))

class_correct = list(0. for i in range(10))
class_total = list(0. for i in range(10))
with torch.no_grad():
    for batch in test_loader:
        images, labels = batch
        preds = network(images)
        _, predicted = torch.max(preds, 1)
        c = (predicted == labels).squeeze()
        for i in range(4):
            label = labels[i]
            class_correct[label] += c[i].item()
            class_total[label] += 1


for i in range(10):
    print('Accuracy of %5s : %2d %%' % (
        classes[i], 100 * class_correct[i] / class_total[i]))